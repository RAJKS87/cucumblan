

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JSONBuilder {

    public static String buildInputJson(Map<String, String> parameterMap) {
        Map<String, Object> parameterStruct = new HashMap<>();
        for (Map.Entry<String, String> mapEntry : parameterMap.entrySet()) {
            String key = mapEntry.getKey();
            if(key.indexOf(".") != -1 ) {
                parameterStruct = getChildObject(parameterStruct, key.split("\\."), mapEntry.getValue());
            } else {
                parameterStruct.put(key, mapEntry.getValue());
            }
        }
        String json = buildJsonString(parameterStruct).toString();
        return json;
    }


    private static JSONObject buildJsonString(Map<String, Object> parameterStruct) {
        JSONObject jsonObject = new JSONObject();
        for (Map.Entry<String, Object> mapEntry : parameterStruct.entrySet()) {
            if (mapEntry.getValue() instanceof Map) {
                jsonObject = buildJsonString((Map<String, Object>) mapEntry.getValue());
            } else if (mapEntry.getValue() instanceof List) {
                JSONArray array = new JSONArray();
                for (Object object : (List<Object>) mapEntry.getValue()) {
                    if (object instanceof Map) {
                        JSONObject obj = buildJsonString((Map<String, Object>) object);
                        array.put(obj);
                    }
                }
                jsonObject.put(mapEntry.getKey(), array);
            } else {
                jsonObject.put(mapEntry.getKey(), StepDefinitionHelper.getActualValue(mapEntry.getValue()));
            }

        }
        return jsonObject;
    }

    private static Map<String, Object> getChildObject(Map<String, Object> parameterStruct, String[]  key, Object value) {
        String elementAt = key[0];
        if(elementAt.contains("[") && elementAt.contains("]") ) {
            buildArrayOfObject(parameterStruct, key, value, elementAt);
        } else {
            if (key.length == 1) {
                parameterStruct.put(elementAt,  value);
                return parameterStruct;
            }
            buildMapOfObject(parameterStruct, key, value, elementAt);
        }
        return parameterStruct;
    }

    private static void buildMapOfObject(Map<String, Object> parameterStruct, String[] key, Object value, String elementAt) {
        Map<String, Object> obj = extractDirectMap(parameterStruct, elementAt);
        populateKeyPath(key, value, obj);
        parameterStruct.put(elementAt, obj);
    }

    private static void populateKeyPath(String[] key, Object value, Map<String, Object> obj) {
        String[] subKey = new String[key.length - 1];
        System.arraycopy(key, 1, subKey, 0, subKey.length);
        getChildObject(obj, subKey, value);
    }

    private static Map<String, Object> extractDirectMap(Map<String, Object> parameterStruct, String elementAt) {
        if (parameterStruct.get(elementAt) != null  ) {
            return  (Map<String, Object>) parameterStruct.get(elementAt);
        } else {
            return  new HashMap<String, Object>();
        }
    }

    private static void buildArrayOfObject(Map<String, Object> parameterStruct, String[] key, Object value, String elementAt) {
        String elementAtArray = elementAt.substring(0, elementAt.indexOf("["));
        int index = Integer.parseInt(elementAt.substring(elementAt.indexOf("[")+1, elementAt.indexOf("]")));
        List<Map<String, Object>> elementList = extractElementList(parameterStruct, elementAtArray);
        Map<String, Object> objListMap = extractMap(index, elementList);
        populateKeyPath(key, value, objListMap);
        populateList(index, elementList, objListMap);
        parameterStruct.put(elementAtArray, elementList);
    }

    private static void populateList(int index, List<Map<String, Object>> elementList, Map<String, Object> objListMap) {
        try {
            elementList.set(index, objListMap);
        } catch (IndexOutOfBoundsException E){
            elementList.add(index, objListMap);
        }
    }

    private static Map<String, Object> extractMap(int index, List<Map<String, Object>> elementList) {
        if(elementList.size() > index) {
            return (Map<String, Object>) elementList.get(index);
        } else {
            return  new HashMap<String, Object>();
        }
    }

    private static List<Map<String, Object>> extractElementList(Map<String, Object> parameterStruct, String elementAtArray) {
        List<Map<String, Object>> elementList;
        if (parameterStruct.containsKey(elementAtArray)) {
            Object objectList = parameterStruct.get(elementAtArray);
            if (objectList == null) {
                elementList = new ArrayList<>();
            } else {
                elementList = (List<Map<String, Object>>) objectList;
            }
        } else {
            elementList = new ArrayList<>();
        }
        return elementList;
    }

}
